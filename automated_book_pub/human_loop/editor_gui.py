import streamlit as st
from pathlib import Path
import textstat
from datetime import datetime
import chromadb
from chromadb.utils import embedding_functions

# --- File Paths ---
SPUN_FILE = Path("outputs/spun_chapter1.txt")
REVIEW_FILE = Path("outputs/reviewed_chapter1.txt")
FEEDBACK_FILE = Path("outputs/review_feedback.txt")
FINAL_FILE = Path("outputs/final_approved.txt")
LOG_FILE = Path("outputs/edit_log.txt")

# --- Load file utility ---
def load_file(path):
    if path.exists():
        return path.read_text(encoding="utf-8")
    return ""

# --- Save Final Approved Text ---
def save_final_text(text):
    FINAL_FILE.write_text(text, encoding="utf-8")

# --- Log Editor Action ---
def log_editor_action(editor, notes):
    with open(LOG_FILE, "a", encoding="utf-8") as log:
        log.write(f"{datetime.now()} | {editor} | {notes}\n")

# --- Initialize ChromaDB ---
chroma_client = chromadb.Client()
embedding_func = embedding_functions.DefaultEmbeddingFunction()
collection = chroma_client.get_or_create_collection(name="book_versions", embedding_function=embedding_func)

# --- Save approved version to ChromaDB ---
def save_version_to_chromadb(text, editor):
    version_id = f"v{datetime.now().strftime('%Y%m%d%H%M%S')}"
    collection.add(documents=[text], metadatas=[{"editor": editor, "timestamp": datetime.now().isoformat()}], ids=[version_id])
    return version_id

# --- Retrieve all versions ---
def get_all_versions():
    return collection.get(include=["documents", "metadatas"])

# --- Retrieve specific version ---
def get_version_by_id(version_id):
    result = collection.get(ids=[version_id])
    return result["documents"][0] if result["documents"] else ""

# --- Search versions by query ---
def search_versions(query):
    return collection.query(query_texts=[query], n_results=3)

# --- Store RL Feedback ---
def store_rl_feedback(query, selected_doc_id):
    feedback_log = Path("outputs/rl_feedback_log.txt")
    with open(feedback_log, "a", encoding="utf-8") as log:
        log.write(f"{datetime.now()} | Query: {query} | Selected: {selected_doc_id}\n")

# --- Streamlit UI ---
st.set_page_config(page_title="HITL Editor", layout="wide")
st.title("üìö Automated Book Publication")

# --- Load Files ---
spun_text = load_file(SPUN_FILE)
reviewed_text = load_file(REVIEW_FILE)
feedback_text = load_file(FEEDBACK_FILE)

# --- Layout ---
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìù AI Writer Output (Spun)")
    st.text_area("Generated by AI Writer", spun_text, height=250, disabled=True)

    st.subheader("üìå Reviewer Feedback")
    st.text_area("From AI Reviewer", feedback_text, height=200, disabled=True)

with col2:
    st.subheader("‚úçÔ∏è Human Editor Panel")
    edited_text = st.text_area("Edit the reviewed version:", reviewed_text, height=500)

    # --- Word Count & Readability ---
    st.markdown(f"üßÆ **Word Count:** `{len(edited_text.split())}`")
    st.markdown(f"üìä **Flesch Reading Ease:** `{textstat.flesch_reading_ease(edited_text):.2f}`")

# --- Checklist ---
st.markdown("### ‚úÖ Final Review Checklist")
grammar = st.checkbox("Grammar checked")
clarity = st.checkbox("Clarity and flow verified")
tone = st.checkbox("Tone suitable for young adults")
applied = st.checkbox("Suggestions applied (if any)")

# Count selected checklist items
selected_count = sum([grammar, clarity, tone, applied])

# --- Editor Info ---
st.markdown("### üßë Editor Details")
editor_name = st.text_input("Your Name")
change_notes = st.text_area("Summary of changes made (optional)")

# --- Save Button ---
if st.button("üíæ Save Final Approved Version"):
    if selected_count < 2:
        st.warning("‚ö†Ô∏è Please select at least any two checklist items before saving.")
    elif not editor_name.strip():
        st.warning("‚ö†Ô∏è Editor name is required to save.")
    else:
        save_final_text(edited_text)
        log_editor_action(editor_name, change_notes)
        version_id = save_version_to_chromadb(edited_text, editor_name)
        st.success(f"‚úÖ Final approved version saved! Version ID: {version_id}")
        st.download_button("‚¨áÔ∏è Download Final Version", edited_text, file_name="final_chapter1.txt")

# --- Compare Past Versions ---
st.markdown("---")
st.header("üîÅ Compare Past Approved Versions")

versions = get_all_versions()
if len(versions["documents"]) < 2:
    st.info("At least 2 approved versions are required for comparison.")
else:
    st.markdown("üßæ **All Approved Versions:**")
    col1, col2 = st.columns(2)
    for i, doc in enumerate(versions["documents"]):
        with (col1 if i % 2 == 0 else col2):
            st.text_area(f"üìò Version {i+1}", doc, height=200, key=f"ver_{i}")

# --- RL Search Section ---
st.markdown("---")
st.header("üîç Intelligent Version Search")

query = st.text_input("üîé Describe what you're looking for (e.g., 'version with more sensory details')")

if st.button("Search Versions") and query:
    results = search_versions(query)
    st.subheader("Top 2 Matching Versions")
    selected = None
    for i, doc in enumerate(results["documents"][0][:2]):
        with st.expander(f"üîé Match {i+1} (ID: {results['ids'][0][i]})"):
            st.markdown(doc)
            if st.button(f"‚úÖ Select This Version", key=f"select_{i}"):
                selected = results['ids'][0][i]
                store_rl_feedback(query, selected)
                st.success(f"‚úîÔ∏è Feedback stored. You selected version: {selected}")
